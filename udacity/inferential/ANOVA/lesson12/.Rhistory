ggplot(aes(x=color, y = price/carat), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
#coord_cartesian(limits=c(0,15000)) +
ylab("Price per Carat") +
xlab("Color")
#ggsave("boxplots price per carat across colors.png")
ggplot(aes(x=color, y = price), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
#coord_cartesian(limits=c(0,15000)) +
ylab("Price per Carat") +
xlab("Color")
#ggsave("boxplots price per carat across colors.png")
ggplot(aes(x=color, y = price/carat), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(limits=c(0,15000)) +
ylab("Price per Carat") +
xlab("Color")
#ggsave("boxplots price per carat across colors.png")
ggplot(aes(x=color, y = price/carat), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(limits=c(0,15000)) +
ylab("Price per Carat") +
xlab("Color")
#ggsave("boxplots price per carat across colors.png")
ggplot(aes(x=color, y = price/carat), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(limits=c(0,7500)) +
ylab("Price per Carat") +
xlab("Color")
#ggsave("boxplots price per carat across colors.png")
View(df)
View(df)
ggplot(aes(x=color, y = price/carat), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(limits=c(0,7500)) +
ylab("Price per Carat") +
xlab("Color")
#ggsave("boxplots price per carat across colors.png")
ggplot(aes(x=color, y = price/carat), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(ylim=c(0,7500)) +
ylab("Price per Carat") +
xlab("Color")
#ggsave("boxplots price per carat across colors.png")
p1<- ggplot(aes(y = price, x = clarity), data=df) +
geom_boxplot(outlier.colour = "red", colour="black", fill="#09dd99") +
coord_cartesian(limits=c(0,7500)) +
ylab("Price") +
xlab("Clarity")
p2<- ggplot(aes(x=color, y = price), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(limits=c(0,7500)) +
ylab("Price") +
xlab("Color")
grid.arrange(p1,p2, nrow=2)
ggsave("boxplots color and clarity.png",plot = grid.arrange(p1,p2,nrow=2))
by(df$price, df$clarity, summary)
by(df$price, df$color, summary)
p1<- ggplot(aes(y = price, x = clarity), data=df) +
geom_boxplot(outlier.colour = "red", colour="black", fill="#09dd99") +
coord_cartesian(ylim=c(0,7500)) +
ylab("Price") +
xlab("Clarity")
p2<- ggplot(aes(x=color, y = price), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(ylim=c(0,7500)) +
ylab("Price") +
xlab("Color")
grid.arrange(p1,p2, nrow=2)
ggsave("boxplots color and clarity.png",plot = grid.arrange(p1,p2,nrow=2))
by(df$price, df$clarity, summary)
by(df$price, df$color, summary)
p1<- ggplot(aes(y = price, x = clarity), data=df) +
geom_boxplot(outlier.colour = "red", colour="black", fill="#09dd99") +
coord_cartesian(ylim=c(0,7000)) +
ylab("Price") +
xlab("Clarity")
p2<- ggplot(aes(x=color, y = price), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(ylim=c(0,7500)) +
ylab("Price") +
xlab("Color")
grid.arrange(p1,p2, nrow=2)
ggsave("boxplots color and clarity.png",plot = grid.arrange(p1,p2,nrow=2))
by(df$price, df$clarity, summary)
by(df$price, df$color, summary)
p1<- ggplot(aes(y = price, x = clarity), data=df) +
geom_boxplot(outlier.colour = "red", colour="black", fill="#09dd99") +
coord_cartesian(ylim=c(0,7500)) +
ylab("Price") +
xlab("Clarity")
p2<- ggplot(aes(x=color, y = price), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(ylim=c(700)) +
ylab("Price") +
xlab("Color")
grid.arrange(p1,p2, nrow=2)
ggsave("boxplots color and clarity.png",plot = grid.arrange(p1,p2,nrow=2))
by(df$price, df$clarity, summary)
by(df$price, df$color, summary)
p1<- ggplot(aes(y = price, x = clarity), data=df) +
geom_boxplot(outlier.colour = "red", colour="black", fill="#09dd99") +
coord_cartesian(ylim=c(0,7500)) +
ylab("Price") +
xlab("Clarity")
p2<- ggplot(aes(x=color, y = price), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(ylim=c(7000)) +
ylab("Price") +
xlab("Color")
grid.arrange(p1,p2, nrow=2)
ggsave("boxplots color and clarity.png",plot = grid.arrange(p1,p2,nrow=2))
by(df$price, df$clarity, summary)
by(df$price, df$color, summary)
p1<- ggplot(aes(y = price, x = clarity), data=df) +
geom_boxplot(outlier.colour = "red", colour="black", fill="#09dd99") +
coord_cartesian(ylim=c(0,7500)) +
ylab("Price") +
xlab("Clarity")
p2<- ggplot(aes(x=color, y = price), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(ylim=c(0,7500)) +
ylab("Price") +
xlab("Color")
grid.arrange(p1,p2, nrow=2)
ggsave("boxplots color and clarity.png",plot = grid.arrange(p1,p2,nrow=2))
by(df$price, df$clarity, summary)
by(df$price, df$color, summary)
p1<- ggplot(aes(y = price, x = clarity), data=df) +
geom_boxplot(outlier.colour = "red", colour="black", fill="#09dd99") +
coord_cartesian(ylim=c(0,7000)) +
ylab("Price") +
xlab("Clarity")
p2<- ggplot(aes(x=color, y = price), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(ylim=c(0,7500)) +
ylab("Price") +
xlab("Color")
grid.arrange(p1,p2, nrow=2)
ggsave("boxplots color and clarity.png",plot = grid.arrange(p1,p2,nrow=2))
by(df$price, df$clarity, summary)
by(df$price, df$color, summary)
p1<- ggplot(aes(y = price, x = clarity), data=df) +
geom_boxplot(outlier.colour = "red", colour="black", fill="#09dd99") +
coord_cartesian(ylim=c(0,7000)) +
ylab("Price") +
xlab("Clarity")
p2<- ggplot(aes(x=color, y = price), data = df) +
geom_boxplot(outlier.colour = "red", fill="#099dd9") +
coord_cartesian(ylim=c(0,8000)) +
ylab("Price") +
xlab("Color")
grid.arrange(p1,p2, nrow=2)
ggsave("boxplots color and clarity.png",plot = grid.arrange(p1,p2,nrow=2))
by(df$price, df$clarity, summary)
by(df$price, df$color, summary)
ggplot(aes(x=www_likes, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color=gender), binwidth = .15) +
scale_x_log10(breaks=c(0,10,50,100,500, 1000,2000,5000,10000,15000, 22500))+
#scale_x_continuous(limits = c(0,15000), breaks=seq(0,15000,250)) +
#scale_y_log10() +
ylab("Proportion of users with that amount of likes") +
xlab("Number of likes")
pf <- load(file = pf)
ggplot(aes(x=www_likes, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color=gender), binwidth = .15) +
scale_x_log10(breaks=c(0,10,50,100,500, 1000,2000,5000,10000,15000, 22500))+
#scale_x_continuous(limits = c(0,15000), breaks=seq(0,15000,250)) +
#scale_y_log10() +
ylab("Proportion of users with that amount of likes") +
xlab("Number of likes")
pf <- pf
ggplot(aes(x=www_likes, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color=gender), binwidth = .15) +
scale_x_log10(breaks=c(0,10,50,100,500, 1000,2000,5000,10000,15000, 22500))+
#scale_x_continuous(limits = c(0,15000), breaks=seq(0,15000,250)) +
#scale_y_log10() +
ylab("Proportion of users with that amount of likes") +
xlab("Number of likes")
pf <- pf
ggplot(aes(x=www_likes, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color=gender), binwidth = .15) +
scale_x_log10(breaks=c(0,10,50,100,500, 1000,2000,5000,10000,15000, 22500))+
#scale_x_continuous(limits = c(0,15000), breaks=seq(0,15000,250)) +
#scale_y_log10() +
ylab("Proportion of users with that amount of likes") +
xlab("Number of likes")
pf <- pf
ggplot(aes(x=www_likes, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color=gender), binwidth = .15) +
scale_x_log10(breaks=c(0,10,50,100,500, 1000,2000,5000,10000,15000, 22500))+
#scale_x_continuous(limits = c(0,15000), breaks=seq(0,15000,250)) +
#scale_y_log10() +
ylab("Proportion of users with that amount of likes") +
xlab("Number of likes")
pf <- read.csv("pseudo_fb.tsv", sep = "\t")
ggplot(aes(x=www_likes, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color=gender), binwidth = .15) +
scale_x_log10(breaks=c(0,10,50,100,500, 1000,2000,5000,10000,15000, 22500))+
#scale_x_continuous(limits = c(0,15000), breaks=seq(0,15000,250)) +
#scale_y_log10() +
ylab("Proportion of users with that amount of likes") +
xlab("Number of likes")
ggplot(aes(x=carat) data(df)) +
geom_histogram()
ggplot(aes(x=carat), data(df)) +
geom_histogram()
ggplot(aes(x=carat), data= df) +
geom_histogram()
ggplot(aes(x=carat), data= df) +
frequency()
ggplot(aes(x=carat), data= df) +
frequency(x = carat)
ggplot(aes(x=carat), data= df) +
frequency(x = df$carat)
ggplot(aes(x=carat), data= df) +
geom_freqpoly(color=carat)
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat))
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=1)
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=1) +
scale_y_log10(limits=c(0,2100))
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=1) +
scale_y_log10(limits=c(1,2100))
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=1) +
scale_y_continuous(limits=c(1,2100))
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=10) +
scale_y_continuous(limits=c(1,2100))
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat)) +
scale_y_continuous(limits=c(1,2100))
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat)) +
scale_y_continuous()
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat) binwidth=10) +
scale_y_continuous()
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=10) +
scale_y_continuous()
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=50) +
scale_y_continuous()
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=30) +
scale_y_continuous()
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=1.5) +
scale_y_continuous()
summary(pf$carat)
summary(df$carat)
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=.5) +
scale_y_continuous()
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=.25) +
scale_y_continuous()
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=.2) +
scale_y_continuous()
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=.1) +
scale_y_continuous()
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=.1) +
scale_y_continuous() +
scale_x_continuous(breaks=seq(0,5.1,0.1))
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=.1) +
scale_y_log10() +
scale_x_continuous(breaks=seq(0,5.1,0.1))
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=.1) +
scale_y_log10() +
scale_x_continuous(breaks=seq(0,6.1,0.1))
max(df$carat)
?frequency
table(df$carat)
with(df, table(df$carat)>2000)
df$carat[(with(df, table(df$carat)>2000)]
df$carat[with(df, table(df$carat)>2000]
df$carat[with(df, table(df$carat)>2000)]
table(df$carat)[with(df, table(df$carat)>2000)]
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=.1) +
#scale_y_log10() +
scale_x_continuous(breaks=seq(0,6.1,0.1))
ggplot(aes(x=carat), data= df) +
geom_freqpoly(aes(color=carat), binwidth=.1) +
scale_y_continuous(breaks=seq(500,11500,1000)) +
scale_x_continuous(breaks=seq(0,6.1,0.1))
?read.table
install.packages('tidyr', dependencies = TRUE)
install.packages('dplyr', dependencies = TRUE)
library(tidyr)
library(dplyr)
view(pf)
View(pf)
View(df)
?select
select(pf, color)
select(pf, starts_with("col"))
head(df)
head(select(pf, starts_with("col")))
select(pf, "color")
select(df, "color")
select(df, color)
install.packages('devtools')
devtools::install_github("rstudio/EDAWR")
rm(pf)
library(EDAWR)
?EDAWR
?storms
storms
?cases
cases
?pollution
cases$country
names(cases)[1]
names(cases)[-1]
unlist(cases[1:3, 2:4])
cases
?unlist
?gather
?spread
cases
gather(cases)
gather(cases, "year", "n", 2:4)
pollution
gather(pollution, "large", "small", 2:3)
gather(pollution, "large", "small", 3)
?gather
gather(pollution, "large", "small", 3:3)
spread(pollution, "large", "small", 3)
spread(pollution, 3, "large", "small")
spread(pollution, size, amount)
pollution
spread(pollution, size, amount)
storms
separate(storms, date, c("year", "month", "day"), sep = "-")
separate(storms, as.numeric(date), c("year", "month", "day"), sep = "-")
separate(storms, as.numeric(date), c("year", "month", "day"), sep = "-")
as.numeric(separate(storms, date, c("year", "month", "day"), sep = "-"))
storms2 <- separate(storms, date, c("year", "month", "day"), sep = "-")
storms
separate(storms, as.numeric(date), c("year", "month", "day"), sep = "-")
storms
separate(storms, date, c("year", "month", "day"), sep = "-")
unite(storms2, "date", year, month, day, sep = "")
storms2 <- separate(storms, date, c("year", "month", "day"), sep = "-")
unite(storms2, "date", year, month, day, sep = "/")
save.image("problemSet3.RData")
rm(list = ls())
setwd("..")
getwd()
setwd("..")
getwd()
setwd("inferential/lesson11/")
ls()
list.files()
sem = sqrt((.13/18 + .13/25))
sem
1.7/sem
sem = sqrt((5.1/52 + 5.1/57))
4/sem
1/sem
sum(481,322)/sum(205,220)
sp <- sum(481,322)/sum(205,220)
sem <- sqrt(sum(sp/481,sp,322))
sem
sum(sp/481,sp,322)
sem <- sqrt(sum(sp/481,sp/322))
sem
4.1/sem
35.8-31.6
4.2/sem
sem <- sqrt(sum(sp/207,sp/220))
4.2/sem
1/1.29
x <- c(2,-3,4,5,7)
mean(x)
x-3
y <- c(10,13,15,10)
y - mean(y)
sum((y - mean(y)^2)
)
18+58
76/8
76/7
sp <- 76/7
sqrt(sum(sp/5,sp/4))
sem <- sqrt(sum(sp/5,sp/4))
3 - mean(y)
-9/sem
df <- 18
3/.94
3/2.33
t <- 3/.94
t^2/sum(t^2,df)
getwd()
save.image("lesson11.RData")
setwd("../../ANOVA/")
dir.create("lesson12")
setwd("lesson12/")
rm(list = ls())
lola <- c(65,45,32,38)
irisa <- c(39,45,48,60)
snap <- c(15,12,14,11)
m <- dim(c(lola,irisa,snap), 3,4)
m <- matrix(c(lola,irisa,snap), 3,4)
m
summary(m)
by(data = m, mean)
m <- matrix(c(lola,irisa,snap), 4,3)
summary(m)
m
mean(m[,])
m[1]
m[,1]
m.T
grand_mean <- mean(m[,])
3*sum((45-grand_mean)^2,(48-grand_mean)^2,(13-grand_mean)^2)
grand_mean
sum((45-grand_mean)^2,(48-grand_mean)^2,(13-grand_mean)^2)
12*sum((45-grand_mean)^2,(48-grand_mean)^2,(13-grand_mean)^2)
4*sum((45-grand_mean)^2,(48-grand_mean)^2,(13-grand_mean)^2)
sum(sum((m[,1]-mean(m[,1]))^2),sum((m[,2]-mean(m[,2]))^2) sum((m[,3]-mean(m[,3]))^2))
sum(sum((m[,1]-mean(m[,1]))^2),sum((m[,2]-mean(m[,2]))^2), sum((m[,3]-mean(m[,3]))^2))
ss_within <-sum(sum((m[,1]-mean(m[,1]))^2),sum((m[,2]-mean(m[,2]))^2), sum((m[,3]-mean(m[,3]))^2))
ss_between <- 4*sum((45-grand_mean)^2,(48-grand_mean)^2,(13-grand_mean)^2)
?tapply
tapply(m, FUN = mean())
tapply(m, INDEX = 1:4, FUN = mean())
tapply(m, INDEX = 4, FUN = mean())
?sapply
lapply(m,mean)
lapply(m[,],mean)
lapply(m[,1],mean)
lapply(m[,1],sum)
lapply(m[,1],list)
x <- list(m[,1])
y <- list(m[,2])
z <- list(m[,3])
all <- list(z,y,x)
lapply(all,mean)
all
x
list(1,2,3,4)
lapply(list(1,2,3), mean)
lapply(list(1:4,2,3), mean)
lapply(mean(sum),all)
all
all <- x+y+z
all <- (x,y,z)
all <- c(x,y,z)
lapply(all, mean)
lapply(all, sum)
lapply(all, diff(mean()))
862/9
ss_between/2
ms_within <- ss_within/9
df_within <- 9
df_between <- 2
ms_between <- ss_between/df_between
ms_between/ms_within
rm(list=(x,y,z))
rm(list=list(x,y,z))
rm(list(x,y,z))
rm(list('x','y','z'))
rm(list='x','y','z'))
rm(list='x','y','z')
single<-c(8,7,10,6,9)
twin<-c(4,6,7,4,9)
triplet<-c(4,4,7,2,3)
4*sum((single-mean(single))^2,(twin-mean(twin))^2,(triplet - mean(triplet))^2)
12*sum((single-mean(single))^2,(twin-mean(twin))^2,(triplet - mean(triplet))^2)
15*sum((single-mean(single))^2,(twin-mean(twin))^2,(triplet - mean(triplet))^2)
3*sum((single-mean(single))^2,(twin-mean(twin))^2,(triplet - mean(triplet))^2)
3*sum((single-mean(single))^2,(twin-mean(twin))^2,(triplet - mean(triplet))^2)/3
grand_m <- mean(c(single,twin,triplet))
grand_m
3*sum((mean(single) - grand_m)^2,(mean(twin)-grand_m)^2,(mean(triplet)-grand_m)^2)
15*sum((mean(single) - grand_m)^2,(mean(twin)-grand_m)^2,(mean(triplet)-grand_m)^2)
5*sum((mean(single) - grand_m)^2,(mean(twin)-grand_m)^2,(mean(triplet)-grand_m)^2)
42/12
20/3.5
anova(c(single,twin,triplet))
single
twin
triplet
?anova
anova(single,twin,triplet)
?aov
twin ~ single
aov(single ~ twin, triplet)
aov(single ~ c(twin, triplet))
aov(single ~ twin,single~triplet))
aov(single ~ twin,single~triplet)
aov(single ~ twin,single~triplet, data = c(single,twin,triplet))
aov(single ~ twin,triplet, data = c(single,twin,triplet))
?~
help("~")
data <- read.table(c(single,twin,triplet))
getwd()
list.files()
save.image("lesson12.RData")
list.files()
